{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\minaxi-foundation\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is logged in on mount\n    const token = localStorage.getItem('auth-token');\n    if (token) {\n      // In a real app, you would validate the token with the server\n      // For now, we'll just set a mock user\n      setUser({\n        id: '1',\n        name: 'Admin User',\n        email: 'admin@minaxigajjar.org',\n        role: 'super_admin'\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Mock login - replace with actual API call\n      if (email === 'admin@minaxigajjar.org' && password === 'admin123') {\n        const mockUser = {\n          id: '1',\n          name: 'Admin User',\n          email: email,\n          role: 'super_admin'\n        };\n        setUser(mockUser);\n        localStorage.setItem('auth-token', 'mock-jwt-token');\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          message: 'Invalid credentials'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('auth-token');\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","localStorage","getItem","id","name","email","role","login","password","mockUser","setItem","success","message","error","logout","removeItem","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/work/minaxi-foundation/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is logged in on mount\r\n    const token = localStorage.getItem('auth-token');\r\n    if (token) {\r\n      // In a real app, you would validate the token with the server\r\n      // For now, we'll just set a mock user\r\n      setUser({ \r\n        id: '1', \r\n        name: 'Admin User', \r\n        email: 'admin@minaxigajjar.org', \r\n        role: 'super_admin' \r\n      });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Mock login - replace with actual API call\r\n      if (email === 'admin@minaxigajjar.org' && password === 'admin123') {\r\n        const mockUser = { \r\n          id: '1', \r\n          name: 'Admin User', \r\n          email: email, \r\n          role: 'super_admin' \r\n        };\r\n        setUser(mockUser);\r\n        localStorage.setItem('auth-token', 'mock-jwt-token');\r\n        return { success: true };\r\n      } else {\r\n        return { success: false, message: 'Invalid credentials' };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, message: 'Login failed' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('auth-token');\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading,\r\n    isAuthenticated: !!user\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,IAAIF,KAAK,EAAE;MACT;MACA;MACAH,OAAO,CAAC;QACNM,EAAE,EAAE,GAAG;QACPC,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,wBAAwB;QAC/BC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IACAP,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAG,MAAAA,CAAOF,KAAK,EAAEG,QAAQ,KAAK;IACvC,IAAI;MACF;MACA,IAAIH,KAAK,KAAK,wBAAwB,IAAIG,QAAQ,KAAK,UAAU,EAAE;QACjE,MAAMC,QAAQ,GAAG;UACfN,EAAE,EAAE,GAAG;UACPC,IAAI,EAAE,YAAY;UAClBC,KAAK,EAAEA,KAAK;UACZC,IAAI,EAAE;QACR,CAAC;QACDT,OAAO,CAACY,QAAQ,CAAC;QACjBR,YAAY,CAACS,OAAO,CAAC,YAAY,EAAE,gBAAgB,CAAC;QACpD,OAAO;UAAEC,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,OAAO;UAAEA,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAsB,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEF,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAe,CAAC;IACpD;EACF,CAAC;EAED,MAAME,MAAM,GAAGA,CAAA,KAAM;IACnBjB,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACc,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC;EAED,MAAMC,KAAK,GAAG;IACZpB,IAAI;IACJW,KAAK;IACLO,MAAM;IACNhB,OAAO;IACPmB,eAAe,EAAE,CAAC,CAACrB;EACrB,CAAC;EAED,oBACET,OAAA,CAACC,WAAW,CAAC8B,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAC3B,GAAA,CA3DWF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}